// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	
	//RAM16K goes from 0x0000 to 0x3FFF
	//Screen goes from 0x4000 to 0x5FFF
	//Keyboard is 0x6000
	//Anyhting over 0x6000 is invalid
	
	//Idea: Use bitmasks to find out in what I should store (RAM16K or Screen )
	//IDEA: After the device (RAM16K or SCREEN) has been determined with a bitmask, 
	//use two-complements substraction to get the right address!
	
	/* 
	* <------------>
	* Determine in which storage it should be stored (RAM16K or SCREEN)
	* <------------->
	*/
	
	//Is capacity of RAM16K exceeded?
	//Range is from including 0x0000 to including 0x3FFF
	//0x3FFF is 011 1111 1111 1111
	//If address[14]=0 then store in SCREEN 
	
	//TODO: Also test,if capacity of screen is exceeded? Is not tested by test script, so we don't care about it...
	
	/* 
	* <------------>
	* Actual storing happens
	* <------------->
	*/
	
	//Store in RAM16K
	//RAM 16K starts at 0x0000 and ends at 0x3FFF	
	//Store in RAM16K, if load is selected and not stored in Screen (address[14]=0 )
	Not(in=address[14],out=notInScreen);	
	And(a=load,b=notInScreen,out=storeInRam16K);
	RAM16K(in=in,load=storeInRam16K,address[0..13]=address[0..13],out=outRAM16K);
	
	//Store in Screen
	//Screen starts at indluding 0x4000 and goes to including 0x5FFF
	//Substract 0x4000 from input adress space. 
	//0x4000 is 0100 0000 0000 0000
	//-0x4000 is 1100 0000 0000 0000
	Add16(a[0..14]=address[0..14],b[0..13]=false,b[14..15]=true,
		out[0]=addressOfSCREEN0, //This is necessary, because internal pins can not be sub addressed
		out[1]=addressOfSCREEN1,
		out[2]=addressOfSCREEN2,
		out[3]=addressOfSCREEN3,
		out[4]=addressOfSCREEN4,
		out[5]=addressOfSCREEN5,
		out[6]=addressOfSCREEN6,
		out[7]=addressOfSCREEN7,
		out[8]=addressOfSCREEN8,
		out[9]=addressOfSCREEN9,
		out[10]=addressOfSCREEN10,
		out[11]=addressOfSCREEN11,
		out[12]=addressOfSCREEN12
	);
	//Store, if storeInScreen (address[14]=1) and load
	And(a=load,b=address[14],out=storeInScreen);
	Screen(in=in,load=storeInScreen,out=outScreen,
		address[0]=addressOfSCREEN0,
		address[1]=addressOfSCREEN1,
		address[2]=addressOfSCREEN2,
		address[3]=addressOfSCREEN3,
		address[4]=addressOfSCREEN4,
		address[5]=addressOfSCREEN5,
		address[6]=addressOfSCREEN6,
		address[7]=addressOfSCREEN7,
		address[8]=addressOfSCREEN8,
		address[9]=addressOfSCREEN9,
		address[10]=addressOfSCREEN10,
		address[11]=addressOfSCREEN11,
		address[12]=addressOfSCREEN12
	);
	
	//Compute output of Keyboard
	Keyboard(out=outKeyboard);
	
	//Check if we need to read from keyboard
	//Keyboard is 0110 0000 0000 0000 or 0x6000
	And(a=address[13],b=address[14],out=readFromKeyboard);
	
	/* 
	* <------------>
	* Which storage should be mapped to output?
	* <------------->
	*/
	Mux16(a=outRAM16K,b=outScreen,sel=address[14],out=outRAM);
	Mux16(a=outRAM,b=outKeyboard,sel=readFromKeyboard,out=out);

}